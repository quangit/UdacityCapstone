# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2.1
# Use a package of configuration called an orb.
orbs:
  aws-eks: circleci/aws-eks@2.2.0
  kubernetes: circleci/kubernetes@1.3.1


jobs:
  makelint:
    docker:
    # Use the same Docker base as the project
      - image: python:3.7.3-stretch

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "requirements.txt" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install
            # Install hadolint
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            chmod +x /bin/hadolint
        
      - save_cache:
          paths:
          - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}

      # run lint!
      - run:
          name: run lint
          command: |
            . venv/bin/activate
            make lint

  build-docker:
    machine: true
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: Build, test and push docker image
          command: |
            docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PWD}
            docker build -t quangit/udacity-capstone-image .
            docker image ls
            docker push quangit/udacity-capstone-image:latest

  check-cluster:
    docker:
      - image: 'cimg/python:3.7'
    steps:
      - kubernetes/install
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: ${EKS_CLUSTER_NAME}
      - run:
          command: |
            kubectl get services
          name: Check cluster

  create-deployment:
    docker:
      - image: 'cimg/python:3.7'
    steps:
      - checkout
      - kubernetes/install
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: ${EKS_CLUSTER_NAME}
          install-kubectl: true
      - kubernetes/create-or-update-resource:
          get-rollout-status: true
          resource-file-path: deployment.yml
          resource-name: deployment/udacity-capstone

  test-deployment:
    docker:
      - image: 'cimg/python:3.7'
    steps:
      - kubernetes/install
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: ${EKS_CLUSTER_NAME}
      - run:
          command: |
            kubectl get svc
            kubectl get nodes
            kubectl get deployment
          name: Test cluster

workflows:
    default:
      jobs:
        - makelint
        - build-docker:
            requires:
              - makelint
        - aws-eks/create-cluster:
            cluster-name: ${EKS_CLUSTER_NAME}
            requires:
              - build-docker
        - check-cluster:
            requires:
              - aws-eks/create-cluster
        - create-deployment:
            requires:
              - check-cluster
        - test-deployment:
            requires:
              - create-deployment
        - aws-eks/update-container-image:
            cluster-name: ${EKS_CLUSTER_NAME}
            container-image-updates: 'udacity-capstone=quangit/udacity-capstone-image:latest'
            get-rollout-status: true
            post-steps:
            - kubernetes/delete-resource:
                resource-names: udacity-capstone
                resource-types: deployment
                wait: true
            requires:
              - test-deployment
            resource-name:  deployment/udacity-capstone
